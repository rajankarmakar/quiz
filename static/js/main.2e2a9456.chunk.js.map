{"version":3,"sources":["Components/Quiz.js","Components/Answer.js","Components/QuizOver.js","App.js","serviceWorker.js","index.js"],"names":["Quiz","react_default","a","createElement","className","this","props","question","Component","Answer","onClick","answerHandeler","answers","QuizOver","getScore","result","_this","score","console","log","totalQuestion","onReplay","App","state","quiz","quizCount","showResult","answer","key","setState","concat","length","onReplayHendeler","_this2","Fragment","Components_Quiz","map","index","Components_Answer","data-txt","Components_QuizOver","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2e2a9456.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Quiz extends Component {\r\n  render() {\r\n    return <h1 className=\"text-center\">{this.props.question} </h1>;\r\n  }\r\n}\r\nexport default Quiz;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Answer extends Component {\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"btn btn-primary btn-lg m-3\"\r\n        onClick={this.props.answerHandeler}\r\n      >\r\n        {this.props.answers}\r\n      </button>\r\n    );\r\n  }\r\n}\r\nexport default Answer;\r\n","import React, { Component } from \"react\";\r\n\r\nclass QuizOver extends Component {\r\n  getScore = () => {\r\n    let { result } = this.props;\r\n    let score = 0;\r\n    if (result[0] === \"YES\") {\r\n      score += 1;\r\n    }\r\n    if (result[1] === \"YES\") {\r\n      score += 1;\r\n    }\r\n    if (result[2] === \"YES\") {\r\n      score += 1;\r\n    }\r\n    console.log(result[0], result[1], result[2]);\r\n    return score;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <h3 className=\"text-primary text-center\">\r\n              Congratulations your Quiz is over\r\n            </h3>\r\n            <h3 className=\"text-center text-success\">\r\n              You Score is {this.getScore()} out of {this.props.totalQuestion}\r\n            </h3>\r\n            <br />\r\n            <br />\r\n            <span className=\"text-center\">\r\n              1. Your first Answer is:{\" \"}\r\n              <strong\r\n                className={\r\n                  this.props.result[0] === \"YES\"\r\n                    ? \"text-success d-inline\"\r\n                    : \"text-danger d-inline\"\r\n                }\r\n              >\r\n                {this.props.result[0]}{\" \"}\r\n              </strong>\r\n              <br />\r\n              2. Your Second Answer is:{\" \"}\r\n              <strong\r\n                className={\r\n                  this.props.result[1] === \"YES\"\r\n                    ? \"text-success d-inline\"\r\n                    : \"text-danger d-inline\"\r\n                }\r\n              >\r\n                {this.props.result[1]}{\" \"}\r\n              </strong>{\" \"}\r\n              <br />\r\n              3. Your third Answer is:{\" \"}\r\n              <strong\r\n                className={\r\n                  this.props.result[2] === \"YES\"\r\n                    ? \"text-success d-inline\"\r\n                    : \"text-danger d-inline\"\r\n                }\r\n              >\r\n                {this.props.result[2]}{\" \"}\r\n              </strong>\r\n            </span>\r\n            <br />\r\n            <br />\r\n            <button\r\n              className=\"btn btn-success btn-lg\"\r\n              onClick={this.props.onReplay}\r\n            >\r\n              Replay\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuizOver;\r\n","import React, { Component } from \"react\";\nimport Quiz from \"./Components/Quiz\";\nimport Answer from \"./Components/Answer\";\nimport QuizOver from \"./Components/QuizOver\";\n\nclass App extends Component {\n  state = {\n    quiz: [\n      {\n        question: \"Do you Love me?\",\n        answers: [\"NO\", \"YES\", \"MAY-BE\", \"NOT-SURE\"]\n      },\n      {\n        question: \"Are you happy today?\",\n        answers: [\"NO\", \"THINKING\", \"LITTLE\", \"YES\"]\n      },\n      {\n        question: \"Do you miss me?\",\n        answers: [\"NOT-AT-ALL\", \"NOT-NOW\", \"YES\", \"REPLY-LATER\"]\n      }\n    ],\n    quizCount: 0,\n    showResult: false,\n    answer: []\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div>\n          <div className=\"container\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <h1 className=\"m-3 text-center text-success\"> React Quiz </h1>\n                <hr className=\"bg-success pt-1\" />\n              </div>\n            </div>\n            {this.state.showResult === false ? (\n              <div>\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <Quiz\n                      question={this.state.quiz[this.state.quizCount].question}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-md-12 text-center\">\n                    {this.state.quiz[this.state.quizCount].answers.map(\n                      (answer, index) => {\n                        return (\n                          <Answer\n                            key={answer}\n                            data-txt={answer}\n                            answers={answer}\n                            answerHandeler={() => this.answerHandeler(answer)}\n                          />\n                        );\n                      }\n                    )}\n                  </div>\n                  <span className=\"text-secondary text-center d-inline\">\n                    Question{\" \"}\n                    <h5 className=\"text-primary d-inline\">\n                      {this.state.quizCount + 1}\n                    </h5>{\" \"}\n                    out of{\" \"}\n                    <h5 className=\"text-primary d-inline\">\n                      {\" \"}\n                      {this.state.quiz.length}{\" \"}\n                    </h5>\n                  </span>\n                </div>\n              </div>\n            ) : (\n              <QuizOver\n                result={this.state.answer}\n                totalQuestion={this.state.quiz.length}\n                onReplay={this.onReplayHendeler}\n              />\n            )}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  answerHandeler = key => {\n    this.setState({\n      quizCount: this.state.quizCount + 1,\n      answer: this.state.answer.concat(key)\n    });\n    if (this.state.quizCount === this.state.quiz.length - 1) {\n      this.setState({\n        quizCount: this.state.quizCount,\n        showResult: true\n      });\n    }\n  };\n  onReplayHendeler = () => {\n    this.setState({ quizCount: 0, showResult: false, answer: [] });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}