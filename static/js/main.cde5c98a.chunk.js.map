{"version":3,"sources":["Components/Quiz.js","Components/Answer.js","Components/QuizOver.js","App.js","serviceWorker.js","index.js","wow.gif"],"names":["Quiz","react_default","a","createElement","className","this","props","question","Component","Answer","onClick","answerHandeler","answers","QuizOver","getScore","result","_this","score","console","log","totalQuestion","alt","src","wow","onReplay","App","state","quiz","img","quizCount","showResult","answer","key","setState","concat","length","onReplayHendeler","_this2","Fragment","Components_Quiz","map","index","Components_Answer","data-txt","Components_QuizOver","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.cde5c98a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass Quiz extends Component {\r\n  render() {\r\n    return <h1 className=\"text-left text-light\">{this.props.question} </h1>;\r\n  }\r\n}\r\nexport default Quiz;\r\n","import React, { Component } from \"react\";\r\n\r\nclass Answer extends Component {\r\n  render() {\r\n    return (\r\n      <button\r\n        className=\"btn btn-secondary btn-lg m-3\"\r\n        onClick={this.props.answerHandeler}\r\n      >\r\n        {this.props.answers}\r\n      </button>\r\n    );\r\n  }\r\n}\r\nexport default Answer;\r\n","import React, { Component } from \"react\";\r\nimport wow from \"../wow.gif\";\r\n\r\nclass QuizOver extends Component {\r\n  getScore = () => {\r\n    let { result } = this.props;\r\n    let score = 0;\r\n    if (result[0] === \"PHP\") {\r\n      score += 1;\r\n    }\r\n    if (result[1] === \"Library\") {\r\n      score += 1;\r\n    }\r\n    if (result[2] === \"FaceBook\") {\r\n      score += 1;\r\n    }\r\n    console.log(result[0], result[1], result[2]);\r\n    return score;\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"container\">\r\n        <div className=\"row\">\r\n          <div className=\"col-md-12\">\r\n            <h3 className=\"text-primary text-center\">\r\n              Congratulations your Quiz is over\r\n            </h3>\r\n            <h3 className=\"text-center text-success\">\r\n              You Score is {this.getScore()} out of {this.props.totalQuestion}\r\n            </h3>\r\n            <br />\r\n            <img className=\"mx-auto d-block\" alt=\"fireworks\" src={wow} />\r\n            <br />\r\n            <span className=\"text-center m-auto d-block text-light\">\r\n              1. Your first Answer is:{\" \"}\r\n              <strong\r\n                className={\r\n                  this.props.result[0] === \"PHP\"\r\n                    ? \"text-success d-inline\"\r\n                    : \"text-danger d-inline\"\r\n                }\r\n              >\r\n                {this.props.result[0]}{\" \"}\r\n              </strong>\r\n              <br />\r\n              2. Your Second Answer is:{\" \"}\r\n              <strong\r\n                className={\r\n                  this.props.result[1] === \"Library\"\r\n                    ? \"text-success d-inline\"\r\n                    : \"text-danger d-inline\"\r\n                }\r\n              >\r\n                {this.props.result[1]}{\" \"}\r\n              </strong>{\" \"}\r\n              <br />\r\n              3. Your third Answer is:{\" \"}\r\n              <strong\r\n                className={\r\n                  this.props.result[2] === \"FaceBook\"\r\n                    ? \"text-success d-inline\"\r\n                    : \"text-danger d-inline\"\r\n                }\r\n              >\r\n                {this.props.result[2]}{\" \"}\r\n              </strong>\r\n            </span>\r\n            <br />\r\n            <span className=\"text-center m-auto d-block\">\r\n              <button\r\n                className=\"btn btn-success btn-lg\"\r\n                onClick={this.props.onReplay}\r\n              >\r\n                Replay\r\n              </button>\r\n            </span>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default QuizOver;\r\n","import React, { Component } from \"react\";\nimport Quiz from \"./Components/Quiz\";\nimport Answer from \"./Components/Answer\";\nimport QuizOver from \"./Components/QuizOver\";\n\nclass App extends Component {\n  state = {\n    quiz: [\n      {\n        question: \"Which one is the programming languages?\",\n        answers: [\"HTML\", \"PHP\", \"CSS\", \"SQL\"],\n        img:\n          \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcTsp3jm9kIl7X5_-W41m-uP8O_Oo35OEyAh6QncUPaXNOE1kO9ctw\"\n      },\n      {\n        question: \"React is a _____ ?\",\n        answers: [\"Progamming Language\", \"CSS Library\", \"Framework\", \"Library\"],\n        img:\n          \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcSPzxjlgiE1cqrgsGJoPtcTWMovcYkPZ43p5FjmtO9kh3Cq0KlY\"\n      },\n      {\n        question: \"React Develop By?\",\n        answers: [\"Microsoft\", \"Google\", \"FaceBook\", \"Apple\"],\n        img:\n          \"https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcRaOYl5uFXpRQuo04vNr-Tntxr-bT6CMnzuhOnQBLLOm-4DvCyT\"\n      }\n    ],\n    quizCount: 0,\n    showResult: false,\n    answer: []\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div>\n          <div className=\"container app-root rounded\">\n            <div className=\"row\">\n              <div className=\"col-md-12\">\n                <h1 className=\"m-3 text-center textColor\">\n                  Simple React Quiz App\n                </h1>\n                <hr className=\"textColor hrContent\" />\n              </div>\n            </div>\n            {this.state.showResult === false ? (\n              <div>\n                <div className=\"row\">\n                  <div className=\"col-md-12\">\n                    <img\n                      className=\"mt-2 mb-2\"\n                      src={this.state.quiz[this.state.quizCount].img}\n                      alt=\"quiz\"\n                    />\n                    <Quiz\n                      question={this.state.quiz[this.state.quizCount].question}\n                    />\n                  </div>\n                </div>\n\n                <div className=\"row\">\n                  <div className=\"col-md-12 text-left\">\n                    {this.state.quiz[this.state.quizCount].answers.map(\n                      (answer, index) => {\n                        return (\n                          <Answer\n                            key={answer}\n                            data-txt={answer}\n                            answers={answer}\n                            answerHandeler={() => this.answerHandeler(answer)}\n                          />\n                        );\n                      }\n                    )}\n                    <br />\n                    <span className=\"text-light text-center d-inline\">\n                      Question :{\" \"}\n                      <h5 className=\"textColor d-inline\">\n                        {this.state.quizCount + 1}\n                      </h5>{\" \"}\n                      out of{\" \"}\n                      <h5 className=\"textColor d-inline\">\n                        {\" \"}\n                        {this.state.quiz.length}{\" \"}\n                      </h5>\n                    </span>\n                  </div>\n                </div>\n              </div>\n            ) : (\n              <QuizOver\n                result={this.state.answer}\n                totalQuestion={this.state.quiz.length}\n                onReplay={this.onReplayHendeler}\n              />\n            )}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n\n  answerHandeler = key => {\n    this.setState({\n      quizCount: this.state.quizCount + 1,\n      answer: this.state.answer.concat(key)\n    });\n    if (this.state.quizCount === this.state.quiz.length - 1) {\n      this.setState({\n        quizCount: this.state.quizCount,\n        showResult: true\n      });\n    }\n  };\n  onReplayHendeler = () => {\n    this.setState({ quizCount: 0, showResult: false, answer: [] });\n  };\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/wow.cb4b39d1.gif\";"],"sourceRoot":""}